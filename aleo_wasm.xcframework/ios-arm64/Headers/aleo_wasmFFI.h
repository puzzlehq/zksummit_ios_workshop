// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#pragma once

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
    // We also try to prevent mixing versions of shared uniffi header structs.
    // If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V4
    #ifndef UNIFFI_SHARED_HEADER_V4
        #error Combining helper code from multiple versions of uniffi is not supported
    #endif // ndef UNIFFI_SHARED_HEADER_V4
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V4
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️

typedef struct RustBuffer
{
    int32_t capacity;
    int32_t len;
    uint8_t *_Nullable data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, const uint8_t *_Nonnull, int32_t, RustBuffer *_Nonnull);

// Task defined in Rust that Swift executes
typedef void (*UniFfiRustTaskCallback)(const void * _Nullable, int8_t);

// Callback to execute Rust tasks using a Swift Task
//
// Args:
//   executor: ForeignExecutor lowered into a size_t value
//   delay: Delay in MS
//   task: UniFfiRustTaskCallback to call
//   task_data: data to pass the task callback
typedef int8_t (*UniFfiForeignExecutorCallback)(size_t, uint32_t, UniFfiRustTaskCallback _Nullable, const void * _Nullable);

typedef struct ForeignBytes
{
    int32_t len;
    const uint8_t *_Nullable data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
    int8_t code;
    RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

// Callbacks for UniFFI Futures
typedef void (*UniFfiFutureCallbackUInt64)(const void * _Nonnull, uint64_t, RustCallStatus);
typedef void (*UniFfiFutureCallbackRustBuffer)(const void * _Nonnull, RustBuffer, RustCallStatus);

// Scaffolding functions
RustBuffer uniffi_aleo_wasm_fn_func_compute_serial_number(RustBuffer plaintext_record, RustBuffer private_key_string, RustBuffer program_name, RustBuffer record_name, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aleo_wasm_fn_func_decrypt_ciphertext_record(RustBuffer input_record_ciphertext, RustBuffer view_key, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aleo_wasm_fn_func_decrypt_transition_ciphertext(RustBuffer view_key, RustBuffer ciphertext, RustBuffer tpk, RustBuffer program_name, RustBuffer function_name, uint16_t index, RustCallStatus *_Nonnull out_status
);
void uniffi_aleo_wasm_fn_func_execute_program(RustBuffer private_key_string, RustBuffer program, RustBuffer function, RustBuffer inputs, double fee_credits, RustBuffer fee_record, RustBuffer url, int8_t cache, size_t uniffi_executor, UniFfiFutureCallbackRustBuffer _Nonnull uniffi_callback, void* _Nonnull uniffi_callback_data, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aleo_wasm_fn_func_new_private_key_string(RustCallStatus *_Nonnull out_status
    
);
uint64_t uniffi_aleo_wasm_fn_func_parse_microcredits(RustBuffer plaintext_record, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aleo_wasm_fn_func_private_key_to_address(RustBuffer input, RustCallStatus *_Nonnull out_status
);
RustBuffer uniffi_aleo_wasm_fn_func_private_key_to_view_key(RustBuffer input, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_aleo_wasm_rustbuffer_alloc(int32_t size, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_aleo_wasm_rustbuffer_from_bytes(ForeignBytes bytes, RustCallStatus *_Nonnull out_status
);
void ffi_aleo_wasm_rustbuffer_free(RustBuffer buf, RustCallStatus *_Nonnull out_status
);
RustBuffer ffi_aleo_wasm_rustbuffer_reserve(RustBuffer buf, int32_t additional, RustCallStatus *_Nonnull out_status
);
uint16_t uniffi_aleo_wasm_checksum_func_compute_serial_number(void
    
);
uint16_t uniffi_aleo_wasm_checksum_func_decrypt_ciphertext_record(void
    
);
uint16_t uniffi_aleo_wasm_checksum_func_decrypt_transition_ciphertext(void
    
);
uint16_t uniffi_aleo_wasm_checksum_func_execute_program(void
    
);
uint16_t uniffi_aleo_wasm_checksum_func_new_private_key_string(void
    
);
uint16_t uniffi_aleo_wasm_checksum_func_parse_microcredits(void
    
);
uint16_t uniffi_aleo_wasm_checksum_func_private_key_to_address(void
    
);
uint16_t uniffi_aleo_wasm_checksum_func_private_key_to_view_key(void
    
);
void ffi_aleo_wasm_foreign_executor_callback_set(UniFfiForeignExecutorCallback _Nonnull callback
);
uint32_t ffi_aleo_wasm_uniffi_contract_version(void
    
);

